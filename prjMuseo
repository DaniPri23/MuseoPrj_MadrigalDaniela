public class PrincipalMuseo {
    public static void main(String[] args) {
        Persona a, b, c;
        a = new Persona("Nicolás Maduro", "666-6");
        b = new Persona("Donald Trump", "333-3");
        c = new Persona("Claudia Sheinbaum", "777-7");
        BoletoMuseo b1, b2, b3;
        b1 = new BoletoMuseo(4500.0);
        b2 = new BoletoMuseo(6000.0);
        b3 = new BoletoMuseo(5800.0);
 
        VentaDelDia vd;
        vd = new VentaDelDia();

        a.asignarBoleto(b1);
        System.out.println("Detalle del primer objeto Persona: " + a.toString());

        vd.registrarVentaBoleto(b1);
 
        b.asignarBoleto(b2);
        System.out.println("Detalle del segundo objeto Persona: " + b.toString());

        vd.registrarVentaBoleto(b2);

        c.asignarBoleto(b3);
        System.out.println("Detalle del tercer objeto Persona: " + c.toString());

        vd.registrarVentaBoleto(b3);

        System.out.println("Contador global de boletos creados: " + BoletoMuseo.getContador());
        System.out.println("Detalle de la Venta Del Día: " + vd.toString());
     }
}

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 * Representa un boleto de museo con información de precio, número y fecha de emisión.
 * Cada boleto se crea con un número único y un precio definido.
 * 
 * @author Daniela
 * @version 1.0
 */
public class BoletoMuseo {
    /** Precio del boleto */
    private double precio;
    /** Número único del boleto */
    private int numeroBoleto;
    /** Fecha de emisión del boleto en formato yyyy-MM-dd */
    private String fechaEmision;
    /** Contador global de boletos creados */
    private static int contador = 0;

    /**
     * Constructor que crea un nuevo boleto con el precio indicado.
     * 
     * @param precio Precio del boleto
     */
    public BoletoMuseo(double precio) {
        this.precio = precio;
        contador++;
        this.numeroBoleto = contador;
        this.fechaEmision = establecerFechaEmisionBoleto();
    }

    /**
     * Establece la fecha de emisión del boleto con la fecha actual.
     * 
     * @return Fecha de emisión en formato yyyy-MM-dd
     */
    private String establecerFechaEmisionBoleto() {
        DateTimeFormatter f = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        return LocalDate.now().format(f);
    }

    /**
     * Retorna el contador global de boletos emitidos.
     * 
     * @return Número total de boletos creados
     */
    public static int getContador() {
       return contador;
    }

    /**
     * Retorna el número del boleto.
     * 
     * @return Número único del boleto
     */
    public int getNumeroBoleto() {
      return numeroBoleto;  
    }

    /**
     * Retorna el precio del boleto.
     * 
     * @return Precio del boleto
     */
    public double getPrecio() {
      return precio;  
    }

    /**
     * Retorna una representación en texto del boleto.
     * 
     * @return Información detallada del boleto
     */
    public String toString() {
        String msg = "BoletoMuseo\n";
        msg += "  Numero: " + numeroBoleto + "\n";
        msg += "  Precio: " + precio + "\n";
        msg += "  Fecha Emision: " + fechaEmision;
        return msg;
    }
}

/**
 * Representa una persona que puede tener asignado un boleto de museo.
 * Cada persona tiene un nombre, una identificación y opcionalmente
 * un boleto asociado.
 * 
 * @author Daniela
 * @version 1.0
 */
public class Persona {
    /** Nombre de la persona */
    private String nombre;
    /** Identificación única de la persona */
    private String identificacion;
    /** Boleto de museo asignado a la persona */
    private BoletoMuseo miBoleto;  

    /**
     * Constructor que crea una persona con nombre e identificación.
     * 
     * @param nombre Nombre de la persona
     * @param ident  Identificación de la persona
     */
    public Persona(String nombre, String ident) {
        this(nombre);
        identificacion = ident;
    }

    /**
     * Constructor que crea una persona solo con nombre.
     * 
     * @param nombre Nombre de la persona
     */
    public Persona(String nombre) {
        this.nombre = nombre;
    }

    /**
     * Asigna la identificación a la persona.
     * 
     * @param pIdentificacion Número de identificación
     */
    public void setIdentificacion(String pIdentificacion) {
        identificacion = pIdentificacion;
    }

    /**
     * Asigna un boleto a la persona.
     * 
     * @param pMiBoleto Objeto de tipo BoletoMuseo
     */
    public void asignarBoleto(BoletoMuseo pMiBoleto) {
        miBoleto = pMiBoleto;
    }

    /**
     * Consulta el número del boleto asignado a la persona.
     * 
     * @return Número del boleto asignado
     */
    public int consultarMiNumeroDeBoleto() {
        return miBoleto.getNumeroBoleto();
    }

    /**
     * Retorna una representación en texto de la persona y su boleto (si existe).
     * 
     * @return Información detallada de la persona
     */
    public String toString() {
        String msg = "Persona\n";
        msg += "  Nombre: " + nombre + "\n";
        msg += "  Identificacion: " + identificacion + "\n";
        if (miBoleto != null) {
            msg += "  Boleto asignado: #" + miBoleto.getNumeroBoleto() + "\n";
        } else {
            msg += "  Boleto asignado: (ninguno)\n";
        }
        return msg;
    }
}

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * Representa la venta de boletos de museo en un día específico.
 * Almacena todos los boletos vendidos y permite calcular el total.
 * 
 * @author TuNombre
 * @version 1.0
 */
public class VentaDelDia {
    /** Fecha de la venta */
    private String fechaDeLaVenta;
    /** Lista de boletos vendidos en el día */
    private List<BoletoMuseo> boletosVendidos;  

    /**
     * Constructor que crea un registro de venta para la fecha actual.
     */
    public VentaDelDia() {
        fechaDeLaVenta = establecerFechaDeLaVenta();
        boletosVendidos = new ArrayList<>();
    }

    /**
     * Registra la venta de un boleto.
     * 
     * @param boleto Boleto de museo vendido
     */
    public void registrarVentaBoleto(BoletoMuseo boleto) {
        boletosVendidos.add(boleto);
    }

    /**
     * Calcula el total de dinero recaudado en el día.
     * 
     * @return Suma de los precios de los boletos vendidos
     */
    public double calcularTotalVentaDelDia() {
        double total = 0.0;
        for (BoletoMuseo b : boletosVendidos) {
            total += b.getPrecio();
        }
        return total;
    }

    /**
     * Establece la fecha de la venta usando la fecha actual.
     * 
     * @return Fecha actual en formato yyyy-MM-dd
     */
    private String establecerFechaDeLaVenta() {
        DateTimeFormatter f = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        return LocalDate.now().format(f);
    }

    /**
     * Retorna una representación en texto de la venta del día,
     * incluyendo los boletos vendidos y el total.
     * 
     * @return Información detallada de la venta del día
     */
    public String toString() {
        String msg = "VentaDelDia\n";
        msg += "  Fecha: " + fechaDeLaVenta + "\n";
        msg += "  Cantidad de boletos: " + boletosVendidos.size() + "\n";
        msg += "  Detalle:\n";
        for (BoletoMuseo b : boletosVendidos) {
            msg += "    - Boleto #" + b.getNumeroBoleto() + " | " + b.getPrecio() + "\n";
        }
        msg += "  Total: " + calcularTotalVentaDelDia();
        return msg;
    }
}
